name: Keep Streamlit App Alive

on:
  schedule:
    - cron: '*/10 * * * *'  # Every 10 minutes
  workflow_dispatch:

jobs:
  wake-up:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Selenium and Dependencies
        run: |
          python -m pip install selenium webdriver-manager

      - name: Run wake-up script with Selenium
        run: |
          python - <<EOF
          from selenium import webdriver
          from selenium.webdriver.chrome.service import Service
          from selenium.webdriver.chrome.options import Options
          from selenium.webdriver.common.by import By
          from selenium.webdriver.common.action_chains import ActionChains
          from selenium.webdriver.support.ui import WebDriverWait
          from selenium.webdriver.support import expected_conditions as EC
          from webdriver_manager.chrome import ChromeDriverManager

          # Configure Chrome options for GitHub Actions
          options = Options()
          options.add_argument("--headless")  # Run in headless mode
          options.add_argument("--no-sandbox")
          options.add_argument("--disable-dev-shm-usage")

          # Start WebDriver
          driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)

          try:
              driver.get("https://makans.streamlit.app/")

              # Wait for page load
              WebDriverWait(driver, 30).until(EC.presence_of_element_located((By.TAG_NAME, "body")))

              # Check if the "app is asleep" message appears
              try:
                  wake_up_button = WebDriverWait(driver, 10).until(
                      EC.element_to_be_clickable((By.XPATH, "//button[contains(text(), 'Yes, get this app back up?')]"))
                  )
                  print("App is asleep. Clicking wake-up button...")
                  ActionChains(driver).move_to_element(wake_up_button).click().perform()
                  
                  # Wait for confirmation
                  WebDriverWait(driver, 40).until(
                      EC.presence_of_element_located((By.XPATH, "//*[contains(text(), 'App is running')]"))
                  )
                  print("Successfully woke up the app!")

              except Exception:
                  print("App seems awake. Refreshing to prevent sleep...")
                  driver.refresh()

          except Exception as e:
              print(f"Error: {e}")

          finally:
              driver.quit()
              print("Browser closed.")
          EOF
